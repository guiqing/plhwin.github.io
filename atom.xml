<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[潘良虎的随想录]]></title>
  <subtitle><![CDATA[每个人都应该为梦想付出全部]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.plhwin.com/"/>
  <updated>2016-02-04T06:35:18.000Z</updated>
  <id>http://www.plhwin.com/</id>
  
  <author>
    <name><![CDATA[彼得潘]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Smartisan T1，锤子手机20天评测报告]]></title>
    <link href="http://www.plhwin.com/2014/07/28/smartisan-t1/"/>
    <id>http://www.plhwin.com/2014/07/28/smartisan-t1/</id>
    <published>2014-07-28T02:25:56.000Z</published>
    <updated>2016-02-04T06:35:18.000Z</updated>
    <content type="html"><![CDATA[<p>我的锤子手机，噢不，是Smartisan T1早在7月12号就已经收到了，本想早一点写这篇关于T1的文章，但一是我收货不算早，二是大家也都没憋住，各种评测早已经铺天盖地袭来，并且我连一个手机发烧友都算不上更非专业评测机构，所以就只好尽量多花一点时间从整体上仔细体验T1之后再给关心这部手机的人分享一下我自己的使用和感受，以求尽可能的客观，也尽可能的写一些不再重复的内容。<br><a id="more"></a></p>
<p>作为一个iPhone 3G/4S/5S的长期用户，我得坦承对安卓手机或多或少是存有一些偏见的，如果非要我说喜欢点安卓手机什么吧，可能唯一羡慕的就是那块比iPhone更大尺寸的屏幕了，所以当确认iPhone6肯定会增大屏幕尺寸的时候，我似乎并没有什么理由拒绝它。但iPhone6的上市遥遥无期，而我确实又想要一个介于4.5-5寸的大屏手机，这种情况下，买一部安卓手机哪怕作为过度也是一个很好的选择，况且作为一名互联网从业者有许多的安卓机测试场景，多配备一个不同品牌的安卓机哪怕作为测试也总归没什么错，加之乐于尝鲜，下手T1也就顺理成章了。</p>
<h1 id="u6536_u8D27_u7BC7"><a href="#u6536_u8D27_u7BC7" class="headerlink" title="收货篇"></a>收货篇</h1><p>5月20号我参加完锤子科技产品发布会后的第二天下单了T1，老罗随后公布了7月8号开始发货，我也在7月8号当天收到了锤子科技3天后（7月11号）给我发货的短信，当时还很兴奋的发了条微博说可以赶在世界杯决赛之前收到T1。</p>
<p>不过随后上演的，可能是迄今为止最曲折的T1收货经历。由于7月11号是星期五，锤子科技官方明确说了周末不配货，而我的收货地址填写的是公司地址，所以周五的晚上我就一直在后台关注着订单状态，如果能在周五之前进度条显示到「配货」状态，那我就赶紧把收货地址改成家庭地址，免得送到了公司，但一直等过了凌晨12点也没有任何动静，我很失望的睡觉了。</p>
<p>谁知第二天早晨刚过8点，我忽然接到一个电话：</p>
<blockquote>
<p>“喂，是潘先生吗？”<br>“是的，哪位？”<br>“我是顺丰快递，现在在你楼下，有一个你的快递请你收一下，你在楼上吗？”<br>“我的快递？什么颜色，多大尺寸？”<br>“红色，和鞋盒子差不多大小”<br>“上面有 Smartisan 字样？”<br>“对对，有的”</p>
</blockquote>
<p>我心里咯噔一下，心想妈的竟然真是T1，搞得我措手不及。不过到货的喜悦冲淡了其他的一切，于是赶紧告诉快递员稍微等我一下，差不多半小时后就能到那边。此时我登录锤子官网后台，发现状态的确改变了，但当看到显示的配货时间是2014-07-10 00:01，出库时间是2014-07-11 21:49时，心里又咯噔一下，伴随着菊花一紧，口中默念：说好的「情怀」呢？所以，你可以想象，当我在9点才收到锤子科技那条著名的已发货并贴心提示用户升级OS的短信通知时，我是怎样一种心情，尼玛这个时候，T1都已经被我拿在手里了。</p>
<p><img src="http://static.plhwin.com/images/smartisan-t1/18.jpg" alt="开箱以及桌面向导"></p>
<p>拆开红色的快递包装，老罗引以为豪的充满逼格的T1包装盒终于露出了真面目，关于这个盒子，之前网上已经爆光太多，所以当时也并没有太多的新鲜和感概，但毫无疑问，「这可能是迄今为止，人类有手机以来最精美的包装盒」这句话并不算太吹牛，只是它真的有点大，所以连打开盒盖也让我觉得这不是一件很容易的事情，好在揭开后看到里面的一切，开盒的不爽又被工匠的喜悦给抵消了。第一次开机会在设定好使用习惯后自动进入「桌面使用向导」，这个向导做的很不错，即使对这个系统完全不熟悉，应该也能很快的上手。</p>
<p>完成了这一切，是时候打开后盖给手机插卡了，可这又是一个槽点满满的地方，毫不夸张的说，我花了超过10分钟的时间才打开了手机后盖，当你后盖打开之时，也是指纹布满之时，开这个盖光用巧劲或者光用蛮劲都不行，得两者结合才能打开，是个大大的技术活，老罗后来也在微博里承认这一批的产品确实有一些后盖做得过分紧了，希望加强品控后，后面的生产有所改善。</p>
<p>历经万难才打开了手机后盖，想要迫不及待的插入手机卡吧？可新问题又来了，系统能识别出插卡了或者没插卡（卡一旦从正确的位置拔出来，系统会自动弹出提示框），但是系统设置里的「电话」选项依然显示是无SIM卡的状态，我把卡重新插回4S，一切正常！别提我当时有多沮丧了。分别联系联通客服和锤子客服，一个让去营业厅换卡试试，如果还不行就肯定是手机问题，另一个让我别担心，如果真是手机问题会立马给我换机或者退机，但心里仍然不爽，谁特么没事喜欢这么折腾着玩啊。</p>
<p>来到联通营业厅，接待的女服务员在听完问题描述后从我手中接过去了手机，没想到第一句竟然是「这什么手机啊，还挺好看」，我说是刚上市的锤子手机，你可能还真还没见过，她的兴奋程度超过了我的想象，兴高采烈眉飞色舞的告诉身边的男伴，「快看，这就是锤子手机也」，我当时心想老罗这么丑竟然也有女粉丝？后来转念一想那个踢足球的小罗比老罗更难看，人家老婆不也照样好几个而且还很好看，我也就释然了。</p>
<p>手机不认卡的问题在换了一张新的芯片之后得到了解决，至今我也没搞明白为什么iPhone能认旧卡而T1不能，如果要对收货篇做个总结，就两字：折腾。</p>
<h1 id="u786C_u4EF6_u7BC7"><a href="#u786C_u4EF6_u7BC7" class="headerlink" title="硬件篇"></a>硬件篇</h1><p>我并不太喜欢单纯的谈论手机硬件的配置，智能手机的硬件在这些年得到了高速发展，这颇有些当年PC时代CPU一年增加一倍主频的味道，如果说iPhone是智能手机的鼻祖，那么智能手机发展到今天已经步入了第7个年头，现在颇有些硬件过剩的意思，主流的配置足以应付大部分应用场景（锤子手机显然达到了主流配置以上），纯拼硬件参数对我这种人来说早已经毫无吸引力，我喜欢iPhone，那是因为IOS这个系统与iPhone这堆硬件组合在一起带给我的综合体验更强于同时代的其他手机，所以我的硬件篇会完全跳过硬件参数配置，而更多的关心它的外观、做工、材质、手感等。</p>
<h2 id="u5916_u89C2_u4E0E_u505A_u5DE5"><a href="#u5916_u89C2_u4E0E_u505A_u5DE5" class="headerlink" title="外观与做工"></a>外观与做工</h2><p>过去一周多的时间，我手上的T1得到了3个人好不含蓄的夸赞，第一位是上面提到的联通营业厅女服务员；第二位也是个女生，她完全不知道锤子手机和老罗，在端详了手机5秒之后也发出了「这手机真好看」的赞叹，我接着问她会考虑买这样的手机吗，她说不会，给出的答案是太大太重了；第三位是来自苏宁实体店里卖手机配件的小伙子，我在他那儿为T1买一根额外的充电数据线，在拿出手机试线的过程中，小伙子问我「这是什么手机？一看起来就感觉很高档」，我说锤子手机，从他一脸茫然的表情中我猜测他也并不知道老罗和锤子。说实话，一周之内有3个人这么赤裸的夸赞T1外观，多少还是有些出乎我意料的，因为T1无论是材质还是外观设计的确和iPhone4S有点像，由于我使用了很长一段时间的4S，可能已经产生了审美疲劳，所以他的外观带给我的感觉并不惊艳，到是做工精良，简约大气，属于耐看型选手。</p>
<h2 id="u6750_u8D28_u4E0E_u624B_u611F"><a href="#u6750_u8D28_u4E0E_u624B_u611F" class="headerlink" title="材质与手感"></a>材质与手感</h2><p>T1的正反双面采用了第三代大猩猩玻璃材质，4S的用户肯定不会陌生，T1采用的3D打磨工艺使整个机身看起来更加的精美，但玻璃的材质同时也带来容易收集指纹和容易摔碎屏幕的缺点。由于我以前的4S被高摔过好几次也没有碎屏，所以这次也没有给T1买保险，但是拿到手后就后悔了，因为T1的屏幕更大，重量更重，如果再像以前的4S一样落地，多半会碎屏，所以还是建议购买T1的朋友加上玻璃险。</p>
<p>有好的自然也有不好的，T1为了追求自然美采用了绝对对称的设计原则，绝对对称究竟是不是最美的，我想这本身就是一个值得探讨的问题，外观这种东西萝卜青菜各有所爱，谁也说服不了谁，反正我自己对此并不感冒，反倒是这个设计给我带来了2个困扰：1、左右两侧的音量调节按键和亮度调节按键放在了最中间的位置，这给我单手握机带来了一小点不适感，同时稍微握的用力一点就很容易被虎口挤压误触发按键，而当真正想要进行按键调节的时候却又必须要弯曲手指才能够着，的确有些别扭，其实只需要两侧按键整体往上移一点，与背面的锤子LOGO处于一个高度，问题就解决了；2、顶部的电源按钮键为了和耳机孔形成”对称”，做的过分小，导致按起来比较费劲，因为电源键可以直接锁频，所以使用到的频率还挺高的，每次锁屏都是一次折磨，锤子科技显然也意识到了这个问题，在最近一次0718的OS升级中增加了长按Home键锁频的功能，想必也是为了让用户摆脱锁频的烦恼。</p>
<h2 id="u673A_u8EAB_u91CD_u91CF"><a href="#u673A_u8EAB_u91CD_u91CF" class="headerlink" title="机身重量"></a>机身重量</h2><p>看到这里，你可能已经发现前面的篇幅中已经好几次提到了T1的重量问题，没错，如果说8.23 mm的机身厚度没有接受难度的话，那么T1约167g的重量在我看来真的有些偏重。要知道iPhone 5S的112g比T1少太多，无论你有多么的喜欢厚重感，在我看来140g的重量也是个分水岭，超过它就会让我觉得手感重，尤其是躺在床上的时候，T1过不了几分钟就会让我有累手的感觉，只能寄希望T2更轻更薄了，当然，T1也并不是重到不可接受，甚至有个朋友告诉我他就喜欢这样有厚重感东西，但无论如何，T1的重量和结构都决定了你千万不能轻易的把它掉在地上，要不嘛，后果肯定会相当的严重，可别怪我没提醒你。</p>
<h2 id="u5B9E_u4F53_u6309_u952E"><a href="#u5B9E_u4F53_u6309_u952E" class="headerlink" title="实体按键"></a>实体按键</h2><p>硬件篇的最后说一下T1的三个实体按键，可能是我使用iPhone时间比较久的原因，所以更喜欢实体按键，反而用不惯其他安卓机的虚拟键，T1的三个按键手感还不错，力度回馈也还算自然，只是我觉得三个按键的细长条设计不太出彩，左右两侧的按键手感也明显不如中间键舒服。最后弱弱的问一句，为什么安卓的生态非要设计返回键和菜单键？这是我不喜欢安卓手机的一个重要原因。</p>
<h1 id="u7CFB_u7EDF_u7BC7"><a href="#u7CFB_u7EDF_u7BC7" class="headerlink" title="系统篇"></a>系统篇</h1><p>去年3月27号，老罗在开过Smartisan OS的发布会后，引来了舆论一边倒的质疑声，我反倒是很期待Smartisan OS，但要说没有担心那是假话，尤其是OS刚发布时候的测试版本不够稳定也不够流畅，电量控制也不是很好，几乎不能作为正常的系统使用，不过这种担心伴随着我拿到T1后被彻底消除了。</p>
<h2 id="u6D41_u7545_u5EA6"><a href="#u6D41_u7545_u5EA6" class="headerlink" title="流畅度"></a>流畅度</h2><p>运行在T1上的Smartisan OS 1.0版本非常流畅，它的流畅度非常接近于5S，比升级到ios7的4S流畅很多，使用过其他安卓机的小伙伴也纷纷赞叹，不过如果同时开启的进程比较多，会比较明显的感觉到机身背面的发热量，但不影响流畅度，发热量也在可以接受的范围之内，5S使用一段时间后也能明显的感觉到发热，两个机器在流畅度和发热上带给我的感受是差不多的。</p>
<h2 id="u684C_u9762_u7CFB_u7EDF"><a href="#u684C_u9762_u7CFB_u7EDF" class="headerlink" title="桌面系统"></a>桌面系统</h2><p>T1的桌面操作系统是最区别于其他安卓手机的地方，也是我最喜欢的一部分，系统提供了9宫格，16宫格和安卓原生桌面，在试用过一段时间后，最终我设置成了不显示APP名称的9宫格，看起来非常舒心，配合Smartisan OS进入多板块操作的pinch功能，它真的可以让我彻底告别多屏滑动寻找APP的烦恼，用起来嘛，就一个字：爽。</p>
<p>锤子科技的设计团队真的让我很羡慕，系统自带APP的图标不仅精美，而且极富质感，不过要除了锤子商店和邮件的2个图标，前者的让我感觉很艳，看起来扎眼，而后者拟物成一张很Q的邮票，让我感觉缺乏科技感。</p>
<p>当你切换桌面主题或者解锁屏幕的时候，桌面上的磁贴会做一个非常华丽的动画效果，而当你切换屏幕的时候，桌面底部的小圆点就像是一个充满生命力的小精灵，在洞口之间来回穿梭，令人印象深刻回味无穷。无论是解锁屏幕时炫彩夺目的小动画，还是滑动屏幕时逼真穿孔的小圆点，无一不体现出Smartisan OS对产品细节的完美追求，很多人将这说成是情怀，我并不是特别认同，每一个产品都应该追求极致的用户体验，或许是这么抠细节产品太少了，以至于让大家不得不用上「情怀」这样的词汇，这本身也是这个世界不完美的表现。</p>
<h2 id="u6613_u7528_u6027_u4E0E_u4EBA_u6027_u5316"><a href="#u6613_u7528_u6027_u4E0E_u4EBA_u6027_u5316" class="headerlink" title="易用性与人性化"></a>易用性与人性化</h2><p>Smartisan OS极其注重易用性与人性化设计，如果抛开生态链来讲，那比起ios也是有过之而无不及，例如为了照顾不同用户习惯而单独设计了左右手操作设置，使用之后我才发现这么多年我用手机竟然是左手习惯；为了解决大屏手机的单手操作问题专门设计了拇指下拉屏幕悬停功能，这个功能在你快速适应后，会非常容易触发和控制，用起来也还算是得心应手；为了更快速的找出联系人，通讯录支持按照地点、频率和时间等多维度排序；为强迫症用户设计了手掌横扫消除角标功能，不过目前好像只有系统自带的APP才支持角标推送，比如微信就不支持角标功能；还有添加日历事件时可以用形象的图标来替代繁琐的文字输入，并且支持拖拽修改日期的操作；使用Power+Home组合键的长按和短按来区分区域截屏和全屏截屏；短信延时发送功能；快速抢拍功能等等，除此之外，还有一个功能令我印象深刻，那就是短信验证码。</p>
<p>相信大家都有深刻的体会，在使用手机的过程中，有许多的应用场景会要求输入手机号码后，由服务方发送验证码，通过验证后才能注册新账号或完成支付。Smartisan OS针对这种情况会在接收到验证码短信后，将验证码提取出来，停留在状态栏里，以方便用户输入，某些获得了短信读取权限的APP甚至会直接将验证码自动填到输入框中而无需用户自己再输入，这个功能让我感觉到了贴心。</p>
<h2 id="u62CD_u7167_u6548_u679C"><a href="#u62CD_u7167_u6548_u679C" class="headerlink" title="拍照效果"></a>拍照效果</h2><p>我并不是专业玩家，所以没法给大家从专业上解读T1的拍照效果，所以我就从纯个人的角度谈谈我对T1拍照的感受，第一感觉是T1整体的效果无论是白天还是晚上都还没有达到5S的水准，其次是T1的白天拍摄效果明显好于夜晚，如果说T1白天的拍照和5S相差无几的话，那夜晚效果的对比差距就更明显了。</p>
<p>除了拍照的后置摄像头，我还在晚上的时候用T1与5S微信视频聊天对比了前置摄像头，结果T1的表现相当不好，画面的图像很昏暗，人物的感觉非常锐，相比之下5S就好很多，好在拍照效果可以通过今后锤子团队不断的tuning来升级，毕竟这是锤子的第一代产品，各方面都需要磨合也需要积累经验，应该多给他们一点点时间。</p>
<p>当然你也发现了，T1的对比对象一直都是在拍照优化上下了很多功夫的5S，是不是对T1的要求严格了点？</p>
<h2 id="u7535_u6C60_u7EED_u822A"><a href="#u7535_u6C60_u7EED_u822A" class="headerlink" title="电池续航"></a>电池续航</h2><p>T1的电池续航只能说非常一般，特别是在刚拿到新机的时候，使用的频度会比平时正常使用的时候高很多，经常在没有运行大型游戏的情况下，不到半天就没电，感觉那段时间一天两充都只能勉强够用，好在我随时备着数据线，基本上手机不用的时候就充电，所以到也影响不大，不过要是在外面，使用频度又很高的话，T1没电可能就要成为一个尴尬的常态了，至少我已经好几次遇到了这样的情况。</p>
<p>如果说大屏手机费电还可以理解的话，那为用户考虑好各种环境下的充电需求就是必须的了。但很遗憾，这点在我看来T1目前做的也还很不到到位，我手上的T1除了使用插座充电比较快以外，使用数据线连接电脑USB接口充电就非常之慢了，有时候甚至插着一上午只充进去了20%的电量，更有甚至，如果你的电脑还同时为其他手机充电，此时再外接一个其它显示屏的话，T1的电量会不增反减，也就是根本充不进去。</p>
<p>除了电脑USB充电困难，T1在汽车里根本就充不上电！用原装数据线插到汽车自带USB接口，手机显示「已连接至电脑」但却并不充电。把USB转换头插到点烟器或者更换其他数据线，效果也一样。反观iPhone，这方面就做的非常成熟，之前的无论是3GS、4S还是5S均没有发生过类似情况，由于我的日常习惯严重依赖于手机与车载系统的连接，所以这事成了我现在最大的烦恼，如果车里不能充电，那导航、音乐等应用就没法随心所欲的使用，这意味着我只能放弃T1作为主力机型使用。</p>
<p>有关非插座充电难的问题，目前我还没有看到过其他人反馈，但这确是我使用T1过程中最大的一个痛点，并且我已经使用过2部T1手机进行过这方面的测试，问题是一致的，说明这很可能是一个普遍现象，究其原因可能是由于Smartisan OS对充电电压的要求设置过高所致，如果是这样，情况还不算太坏，至少可以通过系统升级的途径来解决掉充电难这个问题。</p>
<h2 id="u97F3_u4E50"><a href="#u97F3_u4E50" class="headerlink" title="音乐"></a>音乐</h2><p>音乐是我最常用APP之一，T1这个黑胶唱机的拟物设计在我看来是Smartisan OS追求拟物化设计的最完美体现，它让人可以久久的停留在播放页面，一边看着滚动的唱片，一边尽情的享受音乐。家里有一对惠威MK3音箱和一个AKG K420的入门耳机，T1在插入耳机或者连上音箱后可以激活HI-FI模式，这个模式下的音质比iPhone好很多，声音有张力，令人满意。</p>
<p>但是音乐APP也有个问题，那就是与网易云音乐合作的音乐库曲目太少，好在单独下载的网易云音乐APP所使用的资料库与系统这个音乐APP资料库是相通的，也就是如果你使用网易云音乐下载音乐，打开系统自带的音乐APP也能看到歌曲。</p>
<p>为什么喜欢使用自带的这个音乐APP？除了黑胶唱机的拟物风格我很喜欢外，最主要的原因毫无疑问是为了使用到它的HI-FI模式，我另一个惯常的做法是将下载在电脑里差不多10个G的无损音乐导入手机里，要知道我买32G版本的一个重要目的就是能装更多的音乐，T1对FLAC/WAV等无损音乐格式支持的很好，不需要像iPhone那样必须得使用工具转换成苹果无损格式，这点大赞，但不能按照导入音乐的文件夹查看，这点在我看来还是很重要的，毕竟下载的无损音乐大多都没了艺术家或专辑信息，所以按照这些方式归类找起歌曲来就很费劲了，而网易云音乐APP就能按照导入的文件夹名进行归类，所以实现这个功能基本无难度，期待升级。（Update：经文末评论朋友的提醒，长按音乐APP底栏最右侧的「云音乐」按钮，就会出现隐藏选项，里面有按照文件夹查看的选项，十分感谢！）</p>
<p>我的另一个习惯是使用手机的蓝牙与车载系统连接，这样打电话、听音乐或者导航都可以直接使用车载系统，对比iPhone，两者声音都能正常使用音响，但T1的音乐APP没法将曲目信息显示在车载屏幕上（如下图的左右对比），但我并不确定是不是我的车载系统专门针对iPhone做过优化，不过T1在接打电话时候，屏幕上是能显示出电话号码来的，这点与iPhone并无区别，所以我估计应该是软件层面的不支持。</p>
<p><img src="http://static.plhwin.com/images/smartisan-t1/car-display.jpg" alt="iPhone与T1在播放音乐时车载屏幕的不同表现"></p>
<p>还有一点，如果同时开启音乐和导航，T1遇到导航要播放声音的时候，会粗暴的停止掉音乐，待导航音结束后音乐再接着播放，实际体验后，作为正常的人类我表示无法接受这一点，相比之下，iPhone会将音乐变为背景音，也就是弱化音量处理，这听起来要自然得多。</p>
<h2 id="u7CFB_u7EDF_u901A_u77E5"><a href="#u7CFB_u7EDF_u901A_u77E5" class="headerlink" title="系统通知"></a>系统通知</h2><p>T1的系统通知栏是我见过的我简洁的手机系统通知，从顶部往下拉就可以唤出系统通知栏，通知栏分成APP通知和系统快捷设置两部分，但两者之间竟然不能通过左右滑动切换，实际上，Smartisan OS 系统大部分地方都不支持左右滑动的切换，比如「设置」也是如此，在我看来，大屏手机还是应该适当的增加这种功能以更方便单手操作，我就是经常因为费劲的点击屏幕顶部的操作按钮而造成手机两侧的音量/亮度按键误触发，你可能会说T1不是有拇指下拉的单手优化吗？但在我看来单手优化不是一劳永逸的，这是两码事。</p>
<p>习惯了IOS通知栏，就会觉得Smartisan OS实在太过于简洁了，两者甚至是一个极端，我使用IOS的时候，觉得他的通知栏分类实在太多，所以基本是不看的，因为锁频后一些消息推送会自动显示到屏幕上，一拿起手机就能看到，点击就能快捷进入对应的APP，这几乎不会让人错失任何重要的信息推送，但T1的通知在锁频下如果有新消息推送则什么也看不到，自然的也就没有让人快捷进入的方式了，有时候甚至连声音提示都没有，不得不说这很容易让人忽略掉一些重要信息，比如微信，邮件。池建强老师就在微博里调侃到「终于理解为啥给Android手机的人发微信丫为啥不回了，通知信息太不明显了嘛」，对此我感同身受。</p>
<h1 id="u5199_u5728_u6700_u540E"><a href="#u5199_u5728_u6700_u540E" class="headerlink" title="写在最后"></a>写在最后</h1><p>本文花了很多篇幅去描述我在使用T1这部手机时候所遇到的一些问题，并且使用了iPhone 5S来作为比对标杆，而对优点的提及相对较少，希望老罗团队看到了也不要介意，事实上T1的整体体验真的带给了我「很难想象这是一部安卓手机」的真实感受，假以时日，它一定能成为安卓手机阵营里一个强有力的竞争者，只是它毕竟是个新生儿，还需要时间和经验的积累去逐步完善，你不会真的认为第一次做手机的老罗就能做出一个完美无瑕的手机吧，而如果你因为痛恨老罗”吹牛”，连手机都还没摸过，就逮着一些网上流传的毛病作为攻击的把柄，显然是不可取的，成为一个Hater只会让内心更加灰暗，这个世界需要更多的鼓励和宽容，而老罗也需要和时间赛跑，毕竟上帝们的耐心是有限的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我的锤子手机，噢不，是Smartisan T1早在7月12号就已经收到了，本想早一点写这篇关于T1的文章，但一是我收货不算早，二是大家也都没憋住，各种评测早已经铺天盖地袭来，并且我连一个手机发烧友都算不上更非专业评测机构，所以就只好尽量多花一点时间从整体上仔细体验T1之后再给关心这部手机的人分享一下我自己的使用和感受，以求尽可能的客观，也尽可能的写一些不再重复的内容。<br>]]>
    
    </summary>
    
      <category term="Smartisan" scheme="http://www.plhwin.com/tags/Smartisan/"/>
    
      <category term="T1" scheme="http://www.plhwin.com/tags/T1/"/>
    
      <category term="锤子手机" scheme="http://www.plhwin.com/tags/%E9%94%A4%E5%AD%90%E6%89%8B%E6%9C%BA/"/>
    
      <category term="锤子科技" scheme="http://www.plhwin.com/tags/%E9%94%A4%E5%AD%90%E7%A7%91%E6%8A%80/"/>
    
      <category term="科技" scheme="http://www.plhwin.com/categories/%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Web安全之SQL注入攻击技巧与防范]]></title>
    <link href="http://www.plhwin.com/2014/06/13/web-security-sql/"/>
    <id>http://www.plhwin.com/2014/06/13/web-security-sql/</id>
    <published>2014-06-13T07:57:52.000Z</published>
    <updated>2016-02-01T17:52:41.000Z</updated>
    <content type="html"><![CDATA[<p>在Web1.0时代，人们更多是关注服务器端动态脚本语言的安全问题，比如将一个可执行脚本（俗称Webshell）通过脚本语言的漏洞上传到服务器上，从而获得服务器权限。在Web发展初期，随着动态脚本语言的发展和普及，以及早期工程师对安全问题认知不足导致很多”安全血案”的发生，至今仍然遗留下许多历史问题，比如PHP语言至今仍然无法从语言本身杜绝「文件包含漏洞」（<a href="http://developer.51cto.com/art/201104/255224.htm" target="_blank" rel="external">参见这里</a>），只能依靠工程师良好的代码规范和安全意识。<br><a id="more"></a></p>
<p>伴随着Web2.0、社交网络、微博等一系列新型互联网产品的兴起，基于Web环境的互联网应用越来越广泛，Web攻击的手段也越来越多样，Web安全史上的一个重要里程碑是大约1999年发现的SQL注入攻击，之后的XSS，CSRF等攻击手段愈发强大，Web攻击的思路也从服务端转向了客户端，转向了浏览器和用户。</p>
<p>在安全领域，一般用帽子的颜色来比喻黑客的善与恶，白帽子是指那些工作在反黑客领域的技术专家，这个群体是”善”的的象征；而黑帽子则是指那些利用黑客技术造成破坏甚至谋取私利造成犯罪的群体，他们是”恶”的代表。</p>
<p>“白帽子”和”黑帽子”是两个完全对立的群体。对于黑帽子而言，他们只要找到系统的一个切入点就可以达到入侵破坏的目的，而白帽子必须将自己系统所有可能被突破的地方都设防，以保证系统的安全运行。</p>
<p>这看起来好像是不公平的，但是安全世界里的规则就是这样，可能我们的网站1000处都布防的很好，考虑的很周到，但是只要有一个地方疏忽了，攻击者就会利用这个点进行突破，让我们另外的1000处努力白费。</p>
<h1 id="u5E38_u89C1_u653B_u51FB_u65B9_u5F0F"><a href="#u5E38_u89C1_u653B_u51FB_u65B9_u5F0F" class="headerlink" title="常见攻击方式"></a>常见攻击方式</h1><p>一般说来，在Web安全领域，常见的攻击方式大概有以下几种：<br>1、SQL注入攻击<br>2、跨站脚本攻击 - XSS<br>3、跨站伪造请求攻击 - CSRF<br>4、文件上传漏洞攻击<br>5、分布式拒绝服务攻击 - DDOS   </p>
<p>说个题外话，本来这篇文章一开始的标题叫做 「Web安全之常见攻击方法与防范」，我原本想把上面的这5种方法都全部写在一篇文章里，可是刚写完第一个SQL注入攻击的时候，就发现文章篇幅已经不短了，又很难再进行大幅度的精简，所以索性把Web安全分成一个系列，分多篇文章来呈现给大家，下面你看到的就是第一篇「Web安全之SQL注入攻击的技巧与防范」。</p>
<h1 id="SQL_u6CE8_u5165_u5E38_u89C1_u653B_u51FB_u6280_u5DE7"><a href="#SQL_u6CE8_u5165_u5E38_u89C1_u653B_u51FB_u6280_u5DE7" class="headerlink" title="SQL注入常见攻击技巧"></a>SQL注入常见攻击技巧</h1><p>SQL注入攻击是Web安全史上的一个重要里程碑，它从1999年首次进入人们的视线，至今已经有十几年的历史了，虽然我们现在已经有了很全面的防范对策，但是它的威力仍然不容小觑，SQL注入攻击至今仍然是Web安全领域中的一个重要组成部分。</p>
<p>以PHP+MySQL为例，让我们以一个Web网站中最基本的用户系统来做实例演示，看看SQL注入究竟是怎么发生的。</p>
<p>1、创建一个名为demo的数据库：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span>  <span class="string">`demo`</span> <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span></span><br></pre></td></tr></table></figure>
<p>2、创建一个名为user的数据表，并插入1条演示数据：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>  <span class="string">`demo`</span>.<span class="string">`user`</span> (</span><br><span class="line"><span class="string">`uid`</span> <span class="built_in">INT</span>( <span class="number">11</span> ) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span> <span class="keyword">COMMENT</span>  <span class="string">'用户uid'</span>,</span><br><span class="line"><span class="string">`username`</span> <span class="built_in">VARCHAR</span>( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span>  <span class="string">'用户名'</span>,</span><br><span class="line"><span class="string">`password`</span> <span class="built_in">VARCHAR</span>( <span class="number">32</span> ) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span>  <span class="string">'用户密码'</span></span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span>;</span></span><br><span class="line"><span class="operator"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`demo`</span>.<span class="string">`user`</span> (<span class="string">`uid`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>) <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'plhwin'</span>, <span class="keyword">MD5</span>(<span class="string">'123456'</span>));</span></span><br></pre></td></tr></table></figure>
<h2 id="u5B9E_u4F8B_u4E00"><a href="#u5B9E_u4F8B_u4E00" class="headerlink" title="实例一"></a>实例一</h2><p>通过传入<code>username</code>参数，在页面打印出这个会员的详细信息，编写 <code>userinfo.php</code> 程序代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line">header(<span class="string">'Content-type:text/html; charset=UTF-8'</span>);</span><br><span class="line"><span class="variable">$username</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">'username'</span>]) ? <span class="variable">$_GET</span>[<span class="string">'username'</span>] : <span class="string">''</span>;</span><br><span class="line"><span class="variable">$userinfo</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$username</span>)&#123;</span><br><span class="line">	<span class="comment">//使用mysqli驱动连接demo数据库</span></span><br><span class="line">	<span class="variable">$mysqli</span> = <span class="keyword">new</span> mysqli(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>, <span class="string">'demo'</span>);</span><br><span class="line">	<span class="variable">$sql</span> = <span class="string">"SELECT uid,username FROM user WHERE username='&#123;$username&#125;'"</span>;</span><br><span class="line">	<span class="comment">//mysqli multi_query 支持执行多条MySQL语句</span></span><br><span class="line">	<span class="variable">$query</span> = <span class="variable">$mysqli</span>-&gt;multi_query(<span class="variable">$sql</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$query</span>)&#123;</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			<span class="variable">$result</span> = <span class="variable">$mysqli</span>-&gt;store_result();</span><br><span class="line">			<span class="keyword">while</span>(<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;fetch_assoc())&#123;</span><br><span class="line">				<span class="variable">$userinfo</span>[] = <span class="variable">$row</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(!<span class="variable">$mysqli</span>-&gt;more_results())&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">while</span> (<span class="variable">$mysqli</span>-&gt;next_result());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;pre&gt;'</span>,print_r(<span class="variable">$userinfo</span>, <span class="number">1</span>),<span class="string">'&lt;/pre&gt;'</span>;</span><br></pre></td></tr></table></figure>
<p>上面这个程序要实现的功能是根据浏览器传入的用户名参数，在页面上打印出这个用户的详细信息，程序写的这么复杂是因为我采用了mysqli的驱动，以便能使用到 <code>multi_query</code> 方法来支持同时执行多条SQL语句，这样能更好的说明SQL注入攻击的危害性。</p>
<p>假设我们可以通过 <code>http://localhost/test/userinfo.php?username=plhwin</code> 这个URL来访问到具体某个会员的详情，正常情况下，如果浏览器里传入的username是合法的，那么SQL语句会执行：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> uid,username <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> username=<span class="string">'plhwin'</span></span></span><br></pre></td></tr></table></figure>
<p>但是，如果用户在浏览器里把传入的username参数变为 <code>plhwin&#39;;SHOW TABLES-- hack</code>，也就是当URL变为 <code>http://localhost/test/userinfo.php?username=plhwin&#39;;SHOW TABLES-- hack</code> 的时候，此时我们程序实际执行的SQL语句变成了：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> uid,username <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> username=<span class="string">'plhwin'</span>;</span><span class="operator"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span><span class="comment">-- hack'</span></span></span><br></pre></td></tr></table></figure>
<p><em>注意：在MySQL中，最后连续的两个减号表示忽略此SQL减号后面的语句，我本机的MySQL版本号为5.6.12，目前几乎所有SQL注入实例都是直接采用两个减号结尾，但是实际测试，这个版本号的MySQL要求两个减号后面必须要有空格才能正常注入，而浏览器是会自动删除掉URL尾部空格的，所以我们的注入会在两个减号后面统一添加任意一个字符或单词，本篇文章的SQL注入实例统一以 <code>-- hack</code> 结尾。</em></p>
<p>经过上面的SQL注入后，原本想要执行查询会员详情的SQL语句，此时还额外执行了 <code>SHOW TABLES;</code> 语句，这显然不是开发者的本意，此时可以在浏览器里看到页面的输出：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [uid] =&gt; <span class="number">1</span></span><br><span class="line">            [username] =&gt; plhwin</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [Tables_in_demo] =&gt; user</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>你能清晰的看到，除了会员的信息，数据库表的名字<code>user</code>也被打印在了页面上，如果作恶的黑客此时将参数换成 <code>plhwin&#39;;DROP TABLE user-- hack</code>，那将产生灾难性的严重结果，当你在浏览器中执行 <code>http://localhost/test/userinfo.php?username=plhwin&#39;;DROP TABLE user-- hack</code> 这个URL后，你会发现整个 <code>user</code> 数据表都消失不见了。</p>
<p>通过上面的例子，大家已经认识到SQL注入攻击的危害性，但是仍然会有人心存疑问，MySQL默认驱动的<code>mysql_query</code>方法现在已经不支持多条语句同时执行了，大部分开发者怎么可能像上面的演示程序那样又麻烦又不安全。</p>
<p>是的，在PHP程序中，MySQL是不允许在一个<code>mysql_query</code>中使用分号执行多SQL语句的，这使得很多开发者都认为MySQL本身就不允许多语句执行了，但实际上<a href="http://dev.mysql.com/doc/refman/4.1/en/c-api-multiple-queries.html" target="_blank" rel="external">MySQL早在4.1版本就允许多语句执行</a>，通过PHP的源代码，我们发现其实只是PHP语言自身限制了这种用法，具体情况大家可以看看这篇文章「<a href="http://zone.wooyun.org/content/50" target="_blank" rel="external">PHP+MySQL多语句执行</a>」。</p>
<h2 id="u5B9E_u4F8B_u4E8C"><a href="#u5B9E_u4F8B_u4E8C" class="headerlink" title="实例二"></a>实例二</h2><p>如果系统不允许同时执行多条SQL语句，那么SQL注入攻击是不是就不再这么可怕呢？答案是否定的，我们仍然以上面的user数据表，用Web网站中常用的会员登录系统来做另外一个场景实例，编写程序<code>login.php</code>，代码如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>)&#123;</span><br><span class="line">	<span class="variable">$link</span> = mysql_connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">	mysql_select_db(<span class="string">'demo'</span>, <span class="variable">$link</span>);</span><br><span class="line">	<span class="variable">$username</span> = <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">'username'</span>]) ? <span class="string">''</span> : <span class="variable">$_POST</span>[<span class="string">'username'</span>];</span><br><span class="line">	<span class="variable">$password</span> = <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">'password'</span>]) ? <span class="string">''</span> : <span class="variable">$_POST</span>[<span class="string">'password'</span>];</span><br><span class="line">	<span class="variable">$md5password</span> = md5(<span class="variable">$password</span>);</span><br><span class="line">	<span class="variable">$sql</span> = <span class="string">"SELECT uid,username FROM user WHERE username='&#123;$username&#125;' AND password='&#123;$md5password&#125;'"</span>;</span><br><span class="line">	<span class="variable">$query</span> = mysql_query(<span class="variable">$sql</span>, <span class="variable">$link</span>);</span><br><span class="line">	<span class="variable">$userinfo</span> = mysql_fetch_array(<span class="variable">$query</span>, MYSQL_ASSOC);</span><br><span class="line">	<span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$userinfo</span>))&#123;</span><br><span class="line">		<span class="comment">//登录成功，打印出会员信息</span></span><br><span class="line">		<span class="keyword">echo</span> <span class="string">'&lt;pre&gt;'</span>,print_r(<span class="variable">$userinfo</span>, <span class="number">1</span>),<span class="string">'&lt;/pre&gt;'</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"用户名不存在或密码错误！"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">	&lt;title&gt;Web登录系统SQL注入实例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;form name=<span class="string">"LOGIN_FORM"</span> method=<span class="string">"post"</span> action=<span class="string">""</span>&gt;</span><br><span class="line">	登录帐号: &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> value=<span class="string">""</span> size=<span class="number">30</span> /&gt;&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">	登录密码: &lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span> value=<span class="string">""</span> size=<span class="number">30</span> /&gt;&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">	&lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span> /&gt;</span><br><span class="line">	&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>此时如果输入正确的用户名 <code>plhwin</code> 和密码 <code>123456</code>，执行的SQL语句为：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> uid,username <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> username=<span class="string">'plhwin'</span> <span class="keyword">AND</span> <span class="keyword">password</span>=<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span></span></span><br></pre></td></tr></table></figure>
<p>上面语句没有任何问题，可以看到页面打印出了登录成功后的会员信息，但如果有捣蛋鬼输入的用户名为 <code>plhwin&#39; AND 1=1-- hack</code>，密码随意输入，比如<code>aaaaaa</code>，那么拼接之后的SQL查询语句就变成了如下内容：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> uid,username <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> username=<span class="string">'plhwin'</span> <span class="keyword">AND</span> <span class="number">1</span>=<span class="number">1</span><span class="comment">-- hack' AND password='0b4e7a0e5fe84ad35fb5f95b9ceeac79'</span></span></span><br></pre></td></tr></table></figure>
<p>执行上面的SQL语句，因为<code>1=1</code>是永远成立的条件，这意味着黑客只需要知道别人的会员名，无需知道密码就能顺利登录到系统。</p>
<h1 id="u5982_u4F55_u786E_u5B9ASQL_u6CE8_u5165_u6F0F_u6D1E"><a href="#u5982_u4F55_u786E_u5B9ASQL_u6CE8_u5165_u6F0F_u6D1E" class="headerlink" title="如何确定SQL注入漏洞"></a>如何确定SQL注入漏洞</h1><p>通过以上的实例，我们仍然还会有疑问：黑客并不知道我们程序代码的逻辑和SQL语句的写法，他是如何确定一个网站是否存在SQL注入漏洞呢？一般说来有以下2种途径：</p>
<h2 id="1_u3001_u9519_u8BEF_u63D0_u793A"><a href="#1_u3001_u9519_u8BEF_u63D0_u793A" class="headerlink" title="1、错误提示"></a>1、错误提示</h2><p>如果目标Web网站开启了错误显示，攻击者就可以通过反复调整发送的参数、查看页面打印的错误信息，推测出Web网站使用的数据库和开发语言等重要信息。</p>
<h2 id="2_u3001_u76F2_u6CE8"><a href="#2_u3001_u76F2_u6CE8" class="headerlink" title="2、盲注"></a>2、盲注</h2><p>除非运维人员疏忽，否则大部分的Web运营网站应该都关闭了错误提示信息，此时攻击者一般会采用盲注的技巧来进行反复的尝试判断。 仍然以上面的数据表user为例，我们之前的查看会员详情页面的url地址为<code>userinfo.php?username=plhwin</code>，此时黑客分别访问<code>userinfo.php?username=plhwin&#39; AND 1=1-- hack</code>和<code>userinfo.php?username=plhwin&#39; AND 1=2-- hack</code>，如果前者访问能返回正常的信息而后者不能，就基本可以判断此网站存在SQL注入漏洞，因为后者的<code>1=2</code>这个表达式永远不成立，所以即使username传入了正确的参数也无法通过，由此可以推断这个页面存在SQL注入漏洞，并且可以通过<code>username</code>参数进行注入。</p>
<h1 id="u5982_u4F55_u9632_u5FA1SQL_u6CE8_u5165"><a href="#u5982_u4F55_u9632_u5FA1SQL_u6CE8_u5165" class="headerlink" title="如何防御SQL注入"></a>如何防御SQL注入</h1><p>对于服务器配置层面的防范，应该保证生产环境的Webserver是关闭错误信息的，比如PHP在生产环境的配置文件php.ini中的display_errors应该设置为Off，这样就关闭了错误提示，下面我们更多的从编码的角度来看看如何防范SQL注入。</p>
<p>上面用两个实例分析了SQL注入攻击的技巧，可以看到，但凡有SQL注入漏洞的程序，都是因为程序要接受来自客户端用户输入的变量或URL传递的参数，并且这个变量或参数是组成SQL语句的一部分，对于用户输入的内容或传递的参数，我们应该要时刻保持警惕，这是安全领域里的「外部数据不可信任」的原则，纵观Web安全领域的各种攻击方式，大多数都是因为开发者违反了这个原则而导致的，所以自然能想到的，就是从变量的检测、过滤、验证下手，确保变量是开发者所预想的。</p>
<h2 id="1_u3001_u68C0_u67E5_u53D8_u91CF_u6570_u636E_u7C7B_u578B_u548C_u683C_u5F0F"><a href="#1_u3001_u68C0_u67E5_u53D8_u91CF_u6570_u636E_u7C7B_u578B_u548C_u683C_u5F0F" class="headerlink" title="1、检查变量数据类型和格式"></a>1、检查变量数据类型和格式</h2><p>如果你的SQL语句是类似<code>where id={$id}</code>这种形式，数据库里所有的id都是数字，那么就应该在SQL被执行前，检查确保变量id是int类型；如果是接受邮箱，那就应该检查并严格确保变量一定是邮箱的格式，其他的类型比如日期、时间等也是一个道理。总结起来：<strong>只要是有固定格式的变量，在SQL语句执行前，应该严格按照固定格式去检查，确保变量是我们预想的格式</strong>，这样很大程度上可以避免SQL注入攻击。</p>
<p>比如，我们前面接受<code>username</code>参数例子中，我们的产品设计应该是在用户注册的一开始，就有一个用户名的规则，比如<code>5-20个字符，只能由大小写字母、数字以及一些安全的符号组成，不包含特殊字符</code>。此时我们应该有一个<code>check_username</code>的函数来进行统一的检查。不过，仍然有很多例外情况并不能应用到这一准则，比如文章发布系统，评论系统等必须要允许用户提交任意字符串的场景，这就需要采用过滤等其他方案了。</p>
<h2 id="2_u3001_u8FC7_u6EE4_u7279_u6B8A_u7B26_u53F7"><a href="#2_u3001_u8FC7_u6EE4_u7279_u6B8A_u7B26_u53F7" class="headerlink" title="2、过滤特殊符号"></a>2、过滤特殊符号</h2><p>对于无法确定固定格式的变量，一定要进行特殊符号过滤或转义处理。以PHP为例，通常是采用<code>addslashes</code>函数，它会在指定的预定义字符前添加反斜杠转义，这些预定义的字符是：<code>单引号 (&#39;) 双引号 (&quot;) 反斜杠 (\) NULL</code>。</p>
<p>来看2条SQL语句：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$uid</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">'uid'</span>]) ? <span class="variable">$_GET</span>[<span class="string">'uid'</span>] : <span class="number">0</span>;</span><br><span class="line"><span class="variable">$uid</span> = addslashes(uid);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">"SELECT uid,username FROM user WHERE uid='&#123;$uid&#125;'"</span>;</span><br></pre></td></tr></table></figure>
<p>以及</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$uid</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">'uid'</span>]) ? <span class="variable">$_GET</span>[<span class="string">'uid'</span>] : <span class="number">0</span>;</span><br><span class="line"><span class="variable">$uid</span> = addslashes(uid);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">"SELECT uid,username FROM user WHERE uid=&#123;$uid&#125;"</span>;</span><br></pre></td></tr></table></figure>
<p>上面两个查询语句都经过了php的addslashes函数过滤转义，但在安全性上却大不相同，在MySQL中，对于int类型字段的条件查询，上面个语句的查询效果完全一样，由于第一句SQL的变量被单引号包含起来，SQL注入的时候，黑客面临的首要问题是必须要先闭合前面的单引号，这样才能使后面的语句作为SQL执行，并且还要注释掉原SQL语句中的后面的单引号，这样才可以成功注入，由于代码里使用了addslashes函数，黑客的攻击会无从下手，但第二句没有用引号包含变量，那黑客也不用考虑去闭合、注释，所以即便同样采用addslashes转义，也还是存在SQL攻击漏洞。</p>
<p>对于PHP程序+MySQL构架的程序，在动态的SQL语句中，使用单引号把变量包含起来配合<code>addslashes</code>函数是应对SQL注入攻击的有效手段，但这做的还不够，像上面的2条SQL语句，根据「检查数据类型」的原则，uid都应该经过<code>intval</code>函数格式为int型，这样不仅能有效避免第二条语句的SQL注入漏洞，还能使得程序看起来更自然，尤其是在NoSQL(如MongoDB)中，变量类型一定要与字段类型相匹配才可以。</p>
<p>从上面可以看出，第二个SQL语句是有漏洞的，不过由于使用了addslashes函数，你会发现黑客的攻击语句也存在不能使用特殊符号的条件限制，类似<code>where username=&#39;plhwin&#39;</code>这样的攻击语句是没法执行的，但是黑客可以将字符串转为16进制编码数据或使用<code>char</code>函数进行转化，同样能达到相同的目的，如果对这部分内容感兴趣，可以<a href="http://cbb.sjtu.edu.cn/course/database/lab8.htm" target="_blank" rel="external">点击这里查看</a>。而且由于SQL保留关键字，如「HAVING」、「ORDER BY」的存在，即使是基于黑白名单的过滤方法仍然会有或多或少问题，那么是否还有其他方法来防御SQL注入呢？</p>
<h2 id="3_u3001_u7ED1_u5B9A_u53D8_u91CF_uFF0C_u4F7F_u7528_u9884_u7F16_u8BD1_u8BED_u53E5"><a href="#3_u3001_u7ED1_u5B9A_u53D8_u91CF_uFF0C_u4F7F_u7528_u9884_u7F16_u8BD1_u8BED_u53E5" class="headerlink" title="3、绑定变量，使用预编译语句"></a>3、绑定变量，使用预编译语句</h2><p>MySQL的<code>mysqli</code>驱动提供了预编译语句的支持，不同的程序语言，都分别有使用预编译语句的方法，我们这里仍然以PHP为例，编写<code>userinfo2.php</code>代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line">header(<span class="string">'Content-type:text/html; charset=UTF-8'</span>);</span><br><span class="line"><span class="variable">$username</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">'username'</span>]) ? <span class="variable">$_GET</span>[<span class="string">'username'</span>] : <span class="string">''</span>;</span><br><span class="line"><span class="variable">$userinfo</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$username</span>)&#123;</span><br><span class="line">	<span class="comment">//使用mysqli驱动连接demo数据库</span></span><br><span class="line">	<span class="variable">$mysqli</span> = <span class="keyword">new</span> mysqli(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>, <span class="string">'demo'</span>);</span><br><span class="line">	<span class="comment">//使用问号替代变量位置</span></span><br><span class="line">	<span class="variable">$sql</span> = <span class="string">"SELECT uid,username FROM user WHERE username=?"</span>;</span><br><span class="line">	<span class="variable">$stmt</span> = <span class="variable">$mysqli</span>-&gt;prepare(<span class="variable">$sql</span>);</span><br><span class="line">	<span class="comment">//绑定变量</span></span><br><span class="line">	<span class="variable">$stmt</span>-&gt;bind_param(<span class="string">"s"</span>, <span class="variable">$username</span>);</span><br><span class="line">	<span class="variable">$stmt</span>-&gt;execute();</span><br><span class="line">	<span class="variable">$stmt</span>-&gt;bind_result(<span class="variable">$uid</span>, <span class="variable">$username</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="variable">$stmt</span>-&gt;fetch()) &#123;</span><br><span class="line">	    <span class="variable">$row</span> = <span class="keyword">array</span>();</span><br><span class="line">	    <span class="variable">$row</span>[<span class="string">'uid'</span>] = <span class="variable">$uid</span>;</span><br><span class="line">	    <span class="variable">$row</span>[<span class="string">'username'</span>] = <span class="variable">$username</span>;</span><br><span class="line">	    <span class="variable">$userinfo</span>[] = <span class="variable">$row</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;pre&gt;'</span>,print_r(<span class="variable">$userinfo</span>, <span class="number">1</span>),<span class="string">'&lt;/pre&gt;'</span>;</span><br></pre></td></tr></table></figure>
<p>从上面的代码可以看到，我们程序里并没有使用<code>addslashes</code>函数，但是浏览器里运行 <code>http://localhost/test/userinfo2.php?username=plhwin&#39; AND 1=1-- hack</code>里得不到任何结果，说明SQL漏洞在这个程序里并不存在。</p>
<p>实际上，绑定变量使用预编译语句是预防SQL注入的最佳方式，使用预编译的SQL语句语义不会发生改变，在SQL语句中，变量用问号<code>?</code>表示，黑客即使本事再大，也无法改变SQL语句的结构，像上面例子中，username变量传递的<code>plhwin&#39; AND 1=1-- hack</code>参数，也只会当作username字符串来解释查询，从根本上杜绝了SQL注入攻击的发生。</p>
<h1 id="u6570_u636E_u5E93_u4FE1_u606F_u52A0_u5BC6_u5B89_u5168"><a href="#u6570_u636E_u5E93_u4FE1_u606F_u52A0_u5BC6_u5B89_u5168" class="headerlink" title="数据库信息加密安全"></a>数据库信息加密安全</h1><p>相信大家都还对2011年爆出的CSDN拖库事件记忆犹新，这件事情导致CSDN处在风口浪尖被大家痛骂的原因就在于他们竟然明文存储用户的密码，这引发了科技界对用户信息安全尤其是密码安全的强烈关注，我们在防范SQL注入的发生的同时，也应该未雨绸缪，说不定下一个被拖库的就是你，谁知道呢。</p>
<p>在Web开发中，传统的加解密大致可以分为三种:</p>
<p>1、对称加密：即加密方和解密方都使用相同的加密算法和密钥，这种方案的密钥的保存非常关键，因为算法是公开的，而密钥是保密的，一旦密匙泄露，黑客仍然可以轻易解密。常见的对称加密算法有：<code>AES</code>、<code>DES</code>等。</p>
<p>2、非对称加密：即使用不同的密钥来进行加解密，密钥被分为公钥和私钥，用私钥加密的数据必须使用公钥来解密，同样用公钥加密的数据必须用对应的私钥来解密，常见的非对称加密算法有：<code>RSA</code>等。</p>
<p>3、不可逆加密：利用哈希算法使数据加密之后无法解密回原数据，这样的哈希算法常用的有：<code>md5</code>、<code>SHA-1</code>等。</p>
<p>在我们上面登录系统的示例代码中，<code>$md5password = md5($password);</code>从这句代码可以看到采用了md5的不可逆加密算法来存储密码，这也是多年来业界常用的密码加密算法，但是这仍然不安全。为什么呢？</p>
<p>这是因为md5加密有一个特点：同样的字符串经过md5哈希计算之后生成的加密字符串也是相同的，由于业界采用这种加密的方式由来已久，黑客们也准备了自己强大的md5彩虹表来逆向匹配加密前的字符串，这种用于逆向反推MD5加密的彩虹表在互联网上随处可见，在Google里使用<code>md5 解密</code>作为关键词搜索，一下就能找到<a href="http://www.cmd5.com/" target="_blank" rel="external">md5在线破解网站</a>，把我们插入用户数据时候的MD5加密字符串<code>e10adc3949ba59abbe56e057f20f883e</code>填入进去，瞬间就能得到加密前的密码：<code>123456</code>。当然也并不是每一个都能成功，但可以肯定的是，这个彩虹表会越来越完善。</p>
<p>所以，我们有迫切的需求采用更好的方法对密码数据进行不可逆加密，通常的做法是为每个用户确定不同的密码加盐（salt）后，再混合用户的真实密码进行md5加密，如以下代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="comment">//用户注册时候设置的password</span></span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">'password'</span>];</span><br><span class="line"><span class="comment">//md5加密，传统做法直接将加密后的字符串存入数据库，但这不够，我们继续改良</span></span><br><span class="line"><span class="variable">$passwordmd5</span> = md5(<span class="variable">$password</span>);</span><br><span class="line"><span class="comment">//为用户生成不同的密码盐，算法可以根据自己业务的需要而不同</span></span><br><span class="line"><span class="variable">$salt</span> = substr(uniqid(rand()), -<span class="number">6</span>);</span><br><span class="line"><span class="comment">//新的加密字符串包含了密码盐</span></span><br><span class="line"><span class="variable">$passwordmd5</span> = md5(<span class="variable">$passwordmd5</span>.<span class="variable">$salt</span>);</span><br></pre></td></tr></table></figure>
<h1 id="u5C0F_u7ED3"><a href="#u5C0F_u7ED3" class="headerlink" title="小结"></a>小结</h1><p>1、不要随意开启生产环境中Webserver的错误显示。<br>2、永远不要信任来自用户端的变量输入，有固定格式的变量一定要严格检查对应的格式，没有固定格式的变量需要对引号等特殊字符进行必要的过滤转义。<br>3、使用预编译绑定变量的SQL语句。<br>4、做好数据库帐号权限管理。<br>5、严格加密处理用户的机密信息。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Web1.0时代，人们更多是关注服务器端动态脚本语言的安全问题，比如将一个可执行脚本（俗称Webshell）通过脚本语言的漏洞上传到服务器上，从而获得服务器权限。在Web发展初期，随着动态脚本语言的发展和普及，以及早期工程师对安全问题认知不足导致很多”安全血案”的发生，至今仍然遗留下许多历史问题，比如PHP语言至今仍然无法从语言本身杜绝「文件包含漏洞」（<a href="http://developer.51cto.com/art/201104/255224.htm">参见这里</a>），只能依靠工程师良好的代码规范和安全意识。<br>]]>
    
    </summary>
    
      <category term="SQL注入" scheme="http://www.plhwin.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="Web安全" scheme="http://www.plhwin.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="安全" scheme="http://www.plhwin.com/categories/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Node.js+Socket.IO搭建WebSocket实时应用]]></title>
    <link href="http://www.plhwin.com/2014/05/28/nodejs-socketio/"/>
    <id>http://www.plhwin.com/2014/05/28/nodejs-socketio/</id>
    <published>2014-05-28T08:37:39.000Z</published>
    <updated>2016-02-04T09:46:49.000Z</updated>
    <content type="html"><![CDATA[<p>Web领域的实时推送技术，也被称作Realtime技术。这种技术要达到的目的是让用户不需要刷新浏览器就可以获得实时更新。它有着广泛的应用场景，比如在线聊天室、在线客服系统、评论系统、WebIM等。<br><a id="more"></a></p>
<p><img src="http://static.plhwin.com/images/nodejs-socketio/demo.jpg" alt=""></p>
<h1 id="WebSocket_u7B80_u4ECB"><a href="#WebSocket_u7B80_u4ECB" class="headerlink" title="WebSocket简介"></a>WebSocket简介</h1><p>谈到Web实时推送，就不得不说WebSocket。在WebSocket出现之前，很多网站为了实现实时推送技术，通常采用的方案是轮询(Polling)和Comet技术，Comet又可细分为两种实现方式，一种是长轮询机制，一种称为流技术，这两种方式实际上是对轮询技术的改进，这些方案带来很明显的缺点，需要由浏览器对服务器发出HTTP request，大量消耗服务器带宽和资源。面对这种状况，HTML5定义了WebSocket协议，能更好的节省服务器资源和带宽并实现真正意义上的实时推送。</p>
<p>WebSocket协议本质上是一个基于TCP的协议，它由通信协议和编程API组成，WebSocket能够在浏览器和服务器之间建立双向连接，以基于事件的方式，赋予浏览器实时通信能力。既然是双向通信，就意味着服务器端和客户端可以同时发送并响应请求，而不再像HTTP的请求和响应。</p>
<p>为了建立一个WebSocket连接，客户端浏览器首先要向服务器发起一个HTTP请求，这个请求和通常的HTTP请求不同，包含了一些附加头信息，其中附加头信息”Upgrade: WebSocket”表明这是一个申请协议升级的HTTP请求，服务器端解析这些附加的头信息然后产生应答信息返回给客户端，客户端和服务器端的WebSocket连接就建立起来了，双方就可以通过这个连接通道自由的传递信息，并且这个连接会持续存在直到客户端或者服务器端的某一方主动的关闭连接。</p>
<p>一个典型WebSocket客户端请求头：<br><img src="http://static.plhwin.com/images/nodejs-socketio/websocket-header.jpg" alt=""></p>
<p>前面讲到WebSocket是HTML5中新增的一种通信协议，这意味着一部分老版本浏览器（主要是IE10以下版本）并不具备这个功能， <a href="http://tongji.baidu.com/data/browser" target="_blank" rel="external">通过百度统计的公开数据显示</a>，IE8目前仍以33%的市场份额占据榜首，好在chrome浏览器市场份额逐年上升，现在以超过26%的市场份额位居第二，同时微软前不久宣布停止对IE6的技术支持并提示用户更新到新版本浏览器，这个曾经让无数前端工程师为之头疼的浏览器有望退出历史舞台，再加上几乎所有的智能手机浏览器都支持HTML5，所以使得WebSocket的实战意义大增，但是无论如何，我们实际的项目中，仍然要考虑低版本浏览器的兼容方案：在支持WebSocket的浏览器中采用新技术，而在不支持WebSocket的浏览器里启用Comet来接收发送消息。</p>
<h1 id="WebSocket_u5B9E_u6218"><a href="#WebSocket_u5B9E_u6218" class="headerlink" title="WebSocket实战"></a>WebSocket实战</h1><p>本文将以多人在线聊天应用作为实例场景，我们先来确定这个聊天应用的基本需求。</p>
<h2 id="u9700_u6C42_u5206_u6790"><a href="#u9700_u6C42_u5206_u6790" class="headerlink" title="需求分析"></a>需求分析</h2><p>1、兼容不支持WebSocket的低版本浏览器。<br>2、允许客户端有相同的用户名。<br>3、进入聊天室后可以看到当前在线的用户和在线人数。<br>4、用户上线或退出，所有在线的客户端应该实时更新。<br>5、用户发送消息，所有客户端实时收取。  </p>
<p>在实际的开发过程中，为了使用WebSocket接口构建Web应用，我们首先需要构建一个实现了 WebSocket规范的服务端，服务端的实现不受平台和开发语言的限制，只需要遵从WebSocket规范即可，目前已经出现了一些比较成熟的WebSocket服务端实现，比如本文使用的Node.js+Socket.IO。为什么选用这个方案呢？先来简单介绍下他们两。</p>
<h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>Node.js采用C++语言编写而成，它不是Javascript应用，而是一个Javascript的运行环境，据Node.js创始人Ryan Dahl回忆，他最初希望采用Ruby来写Node.js，但是后来发现Ruby虚拟机的性能不能满足他的要求，后来他尝试采用V8引擎，所以选择了C++语言。</p>
<p>Node.js支持的系统包括*nux、Windows，这意味着程序员可以编写系统级或者服务器端的Javascript代码，交给Node.js来解释执行。Node.js的Web开发框架Express，可以帮助程序员快速建立web站点，从2009年诞生至今，Node.js的成长的速度有目共睹，其发展前景获得了技术社区的充分肯定。</p>
<h2 id="Socket-IO"><a href="#Socket-IO" class="headerlink" title="Socket.IO"></a>Socket.IO</h2><p>Socket.IO是一个开源的WebSocket库，它通过Node.js实现WebSocket服务端，同时也提供客户端JS库。Socket.IO支持以事件为基础的实时双向通讯，它可以工作在任何平台、浏览器或移动设备。</p>
<p>Socket.IO支持4种协议：WebSocket、htmlfile、xhr-polling、jsonp-polling，它会自动根据浏览器选择适合的通讯方式，从而让开发者可以聚焦到功能的实现而不是平台的兼容性，同时Socket.IO具有不错的稳定性和性能。</p>
<h1 id="u7F16_u7801_u5B9E_u73B0"><a href="#u7F16_u7801_u5B9E_u73B0" class="headerlink" title="编码实现"></a>编码实现</h1><p>本文一开始的的插图就是效果演示图：可以<a href="http://demo.plhwin.com/chat/" target="_blank" rel="external">点击这里</a>查看在线演示，整个开发过程非常简单，下面简单记录了开发步骤：</p>
<h2 id="u5B89_u88C5Node-js"><a href="#u5B89_u88C5Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>根据自己的操作系统，去<a href="http://www.nodejs.org/download/" target="_blank" rel="external">Node.js官网</a>下载安装即可。如果成功安装。在命令行输入<code>node -v</code>和<code>npm -v</code>应该能看到相应的版本号。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node -v  </span><br><span class="line">v0.<span class="number">10.26</span>  </span><br><span class="line">npm -v  </span><br><span class="line"><span class="number">1.4</span>.<span class="number">6</span></span><br></pre></td></tr></table></figure>
<h2 id="u642D_u5EFAWebSocket_u670D_u52A1_u7AEF"><a href="#u642D_u5EFAWebSocket_u670D_u52A1_u7AEF" class="headerlink" title="搭建WebSocket服务端"></a>搭建WebSocket服务端</h2><p>这个环节我们尽可能的考虑真实生产环境，把WebSocket后端服务搭建成一个线上可以用域名访问的服务，如果你是在本地开发环境，可以换成本地ip地址，或者使用一个虚拟域名指向本地ip。</p>
<p>进入到你的工作目录，如<code>/workspace/wwwroot/plhwin/realtime.plhwin.com</code>，新建一个名为 <code>package.json</code>的文件，内容如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">name</span>": <span class="value"><span class="string">"realtime-server"</span></span>,</span><br><span class="line">  "<span class="attribute">version</span>": <span class="value"><span class="string">"0.0.1"</span></span>,</span><br><span class="line">  "<span class="attribute">description</span>": <span class="value"><span class="string">"my first realtime server"</span></span>,</span><br><span class="line">  "<span class="attribute">dependencies</span>": <span class="value">&#123;&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来使用<code>npm</code>命令安装<code>express</code>和<code>socket.io</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> <span class="comment">--save express</span></span><br><span class="line">npm <span class="keyword">install</span> <span class="comment">--save socket.io</span></span></span><br></pre></td></tr></table></figure></p>
<p>安装成功后，应该可以看到工作目录下生成了一个名为<code>node_modules</code>的文件夹，里面分别是<code>express</code>和<code>socket.io</code>，接下来可以开始编写服务端的代码了，新建一个文件：<code>index.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(http);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">	res.send(<span class="string">'&lt;h1&gt;Welcome Realtime Server&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'listening on *:3000'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>命令行运行<code>node index.js</code>，如果一切顺利，你应该会看到返回的<code>listening on *:3000</code>字样，这说明服务已经成功搭建了。此时浏览器中打开<code>http://localhost:3000</code>应该可以看到正常的欢迎页面。</p>
<p>如果你想要让服务运行在线上服务器，并且可以通过域名访问的话，可以使用Nginx做代理，在nginx.conf中添加如下配置，然后将域名（比如：realtime.plhwin.com）解析到服务器IP即可。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">server</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="title">listen</span>       <span class="number">80</span>;</span><br><span class="line">  <span class="title">server_name</span>  realtime.plhwin.com;</span><br><span class="line">  <span class="title">location</span> / &#123;</span><br><span class="line">    <span class="title">proxy_pass</span> <span class="url">http://127.0.0.1:3000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完成以上步骤，<code>http://realtime.plhwin.com:3000</code>的后端服务就正常搭建了。</p>
<p><img src="http://static.plhwin.com/images/nodejs-socketio/welcome-realtime-server.jpg" alt=""></p>
<h2 id="u670D_u52A1_u7AEF_u4EE3_u7801_u5B9E_u73B0"><a href="#u670D_u52A1_u7AEF_u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="服务端代码实现"></a>服务端代码实现</h2><p>前面讲到的<code>index.js</code>运行在服务端，之前的代码只是一个简单的WebServer欢迎内容，让我们把WebSocket服务端完整的实现代码加入进去，整个服务端就可以处理客户端的请求了。完整的<code>index.js</code>代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(http);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">	res.send(<span class="string">'&lt;h1&gt;Welcome Realtime Server&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在线用户</span></span><br><span class="line"><span class="keyword">var</span> onlineUsers = &#123;&#125;;</span><br><span class="line"><span class="comment">//当前在线人数</span></span><br><span class="line"><span class="keyword">var</span> onlineCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'a user connected'</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//监听新用户加入</span></span><br><span class="line">	socket.on(<span class="string">'login'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">		<span class="comment">//将新加入用户的唯一标识当作socket的名称，后面退出的时候会用到</span></span><br><span class="line">		socket.name = obj.userid;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//检查在线列表，如果不在里面就加入</span></span><br><span class="line">		<span class="keyword">if</span>(!onlineUsers.hasOwnProperty(obj.userid)) &#123;</span><br><span class="line">			onlineUsers[obj.userid] = obj.username;</span><br><span class="line">			<span class="comment">//在线人数+1</span></span><br><span class="line">			onlineCount++;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//向所有客户端广播用户加入</span></span><br><span class="line">		io.emit(<span class="string">'login'</span>, &#123;onlineUsers:onlineUsers, onlineCount:onlineCount, user:obj&#125;);</span><br><span class="line">		<span class="built_in">console</span>.log(obj.username+<span class="string">'加入了聊天室'</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//监听用户退出</span></span><br><span class="line">	socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="comment">//将退出的用户从在线列表中删除</span></span><br><span class="line">		<span class="keyword">if</span>(onlineUsers.hasOwnProperty(socket.name)) &#123;</span><br><span class="line">			<span class="comment">//退出用户的信息</span></span><br><span class="line">			<span class="keyword">var</span> obj = &#123;userid:socket.name, username:onlineUsers[socket.name]&#125;;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//删除</span></span><br><span class="line">			<span class="keyword">delete</span> onlineUsers[socket.name];</span><br><span class="line">			<span class="comment">//在线人数-1</span></span><br><span class="line">			onlineCount--;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//向所有客户端广播用户退出</span></span><br><span class="line">			io.emit(<span class="string">'logout'</span>, &#123;onlineUsers:onlineUsers, onlineCount:onlineCount, user:obj&#125;);</span><br><span class="line">			<span class="built_in">console</span>.log(obj.username+<span class="string">'退出了聊天室'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//监听用户发布聊天内容</span></span><br><span class="line">	socket.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">		<span class="comment">//向所有客户端广播发布的消息</span></span><br><span class="line">		io.emit(<span class="string">'message'</span>, obj);</span><br><span class="line">		<span class="built_in">console</span>.log(obj.username+<span class="string">'说：'</span>+obj.content);</span><br><span class="line">	&#125;);</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'listening on *:3000'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="u5BA2_u6237_u7AEF_u4EE3_u7801_u5B9E_u73B0"><a href="#u5BA2_u6237_u7AEF_u4EE3_u7801_u5B9E_u73B0" class="headerlink" title="客户端代码实现"></a>客户端代码实现</h2><p>进入客户端工作目录<code>/workspace/wwwroot/plhwin/demo.plhwin.com/chat</code>，新建一个<code>index.html</code>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"format-detection"</span> <span class="attribute">content</span>=<span class="value">"telephone=no"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"format-detection"</span> <span class="attribute">content</span>=<span class="value">"email=no"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">content</span>=<span class="value">"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=0"</span> <span class="attribute">name</span>=<span class="value">"viewport"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">title</span>&gt;</span>多人聊天室<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">href</span>=<span class="value">"./style.css"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--[if lt IE 8]&gt;&lt;script src="./json3.min.js"&gt;&lt;/script&gt;&lt;![endif]--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://realtime.plhwin.com:3000/socket.io/socket.io.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"loginbox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"width:260px;margin:200px auto;"</span>&gt;</span></span><br><span class="line">                请先输入你在聊天室的昵称</span><br><span class="line">                <span class="tag">&lt;<span class="title">br</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">br</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">style</span>=<span class="value">"width:180px;"</span> <span class="attribute">placeholder</span>=<span class="value">"请输入用户名"</span> <span class="attribute">id</span>=<span class="value">"username"</span> <span class="attribute">name</span>=<span class="value">"username"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">style</span>=<span class="value">"width:50px;"</span> <span class="attribute">value</span>=<span class="value">"提交"</span> <span class="attribute">onclick</span>=<span class="value">"CHAT.usernameSubmit();"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"chatbox"</span> <span class="attribute">style</span>=<span class="value">"display:none;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"background:#3d3d3d;height: 28px; width: 100%;font-size:12px;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"line-height: 28px;color:#fff;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"text-align:left;margin-left:10px;"</span>&gt;</span>Websocket多人聊天室<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"float:right; margin-right:10px;"</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"showusername"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span> | </span><br><span class="line">					<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">onclick</span>=<span class="value">"CHAT.logout()"</span> <span class="attribute">style</span>=<span class="value">"color:#fff;"</span>&gt;</span>退出<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"doc"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"chat"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"message"</span> <span class="attribute">class</span>=<span class="value">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"onlinecount"</span> <span class="attribute">style</span>=<span class="value">"background:#EFEFF4; font-size:12px; margin-top:10px; margin-left:10px; color:#666;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"input-box"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">maxlength</span>=<span class="value">"140"</span> <span class="attribute">placeholder</span>=<span class="value">"请输入聊天内容，按Ctrl提交"</span> <span class="attribute">id</span>=<span class="value">"content"</span> <span class="attribute">name</span>=<span class="value">"content"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"action"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">button</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">id</span>=<span class="value">"mjr_send"</span> <span class="attribute">onclick</span>=<span class="value">"CHAT.submit();"</span>&gt;</span>提交<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"./client.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面的html内容本身没有什么好说的，我们主要看看里面的4个文件请求：<br>1、<code>realtime.plhwin.com:3000/socket.io/socket.io.js</code><br>2、<code>style.css</code><br>3、<code>json3.min.js</code><br>4、<code>client.js</code></p>
<p>第1个JS是Socket.IO提供的客户端JS文件，在前面安装服务端的步骤中，当npm安装完socket.io并搭建起WebServer后，这个JS文件就可以正常访问了。</p>
<p>第2个style.css文件没什么好说的，就是样式文件而已。</p>
<p>第3个JS只在IE8以下版本的IE浏览器中加载，目的是让这些低版本的IE浏览器也能处理json，这是一个开源的JS，详见：<a href="http://bestiejs.github.io/json3/" target="_blank" rel="external">http://bestiejs.github.io/json3/</a></p>
<p>第4个<code>client.js</code>是完整的客户端的业务逻辑实现代码，它的内容如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> d = <span class="built_in">document</span>,</span><br><span class="line">	w = <span class="built_in">window</span>,</span><br><span class="line">	p = <span class="built_in">parseInt</span>,</span><br><span class="line">	dd = d.documentElement,</span><br><span class="line">	db = d.body,</span><br><span class="line">	dc = d.compatMode == <span class="string">'CSS1Compat'</span>,</span><br><span class="line">	dx = dc ? dd: db,</span><br><span class="line">	ec = <span class="built_in">encodeURIComponent</span>;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	w.CHAT = &#123;</span><br><span class="line">		msgObj:d.getElementById(<span class="string">"message"</span>),</span><br><span class="line">		screenheight:w.innerHeight ? w.innerHeight : dx.clientHeight,</span><br><span class="line">		username:<span class="literal">null</span>,</span><br><span class="line">		userid:<span class="literal">null</span>,</span><br><span class="line">		socket:<span class="literal">null</span>,</span><br><span class="line">		<span class="comment">//让浏览器滚动条保持在最低部</span></span><br><span class="line">		scrollToBottom:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			w.scrollTo(<span class="number">0</span>, <span class="keyword">this</span>.msgObj.clientHeight);</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//退出，本例只是一个简单的刷新</span></span><br><span class="line">		logout:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="comment">//this.socket.disconnect();</span></span><br><span class="line">			location.reload();</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//提交聊天消息内容</span></span><br><span class="line">		submit:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> content = d.getElementById(<span class="string">"content"</span>).value;</span><br><span class="line">			<span class="keyword">if</span>(content != <span class="string">''</span>)&#123;</span><br><span class="line">				<span class="keyword">var</span> obj = &#123;</span><br><span class="line">					userid: <span class="keyword">this</span>.userid,</span><br><span class="line">					username: <span class="keyword">this</span>.username,</span><br><span class="line">					content: content</span><br><span class="line">				&#125;;</span><br><span class="line">				<span class="keyword">this</span>.socket.emit(<span class="string">'message'</span>, obj);</span><br><span class="line">				d.getElementById(<span class="string">"content"</span>).value = <span class="string">''</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;,</span><br><span class="line">		genUid:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()+<span class="string">""</span>+<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">899</span>+<span class="number">100</span>);</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//更新系统消息，本例中在用户加入、退出的时候调用</span></span><br><span class="line">		updateSysMsg:<span class="function"><span class="keyword">function</span>(<span class="params">o, action</span>)</span>&#123;</span><br><span class="line">			<span class="comment">//当前在线用户列表</span></span><br><span class="line">			<span class="keyword">var</span> onlineUsers = o.onlineUsers;</span><br><span class="line">			<span class="comment">//当前在线人数</span></span><br><span class="line">			<span class="keyword">var</span> onlineCount = o.onlineCount;</span><br><span class="line">			<span class="comment">//新加入用户的信息</span></span><br><span class="line">			<span class="keyword">var</span> user = o.user;</span><br><span class="line">				</span><br><span class="line">			<span class="comment">//更新在线人数</span></span><br><span class="line">			<span class="keyword">var</span> userhtml = <span class="string">''</span>;</span><br><span class="line">			<span class="keyword">var</span> separator = <span class="string">''</span>;</span><br><span class="line">			<span class="keyword">for</span>(key <span class="keyword">in</span> onlineUsers) &#123;</span><br><span class="line">		        <span class="keyword">if</span>(onlineUsers.hasOwnProperty(key))&#123;</span><br><span class="line">					userhtml += separator+onlineUsers[key];</span><br><span class="line">					separator = <span class="string">'、'</span>;</span><br><span class="line">				&#125;</span><br><span class="line">		    &#125;</span><br><span class="line">			d.getElementById(<span class="string">"onlinecount"</span>).innerHTML = <span class="string">'当前共有 '</span>+onlineCount+<span class="string">' 人在线，在线列表：'</span>+userhtml;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//添加系统消息</span></span><br><span class="line">			<span class="keyword">var</span> html = <span class="string">''</span>;</span><br><span class="line">			html += <span class="string">'&lt;div class="msg-system"&gt;'</span>;</span><br><span class="line">			html += user.username;</span><br><span class="line">			html += (action == <span class="string">'login'</span>) ? <span class="string">' 加入了聊天室'</span> : <span class="string">' 退出了聊天室'</span>;</span><br><span class="line">			html += <span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">			<span class="keyword">var</span> section = d.createElement(<span class="string">'section'</span>);</span><br><span class="line">			section.className = <span class="string">'system J-mjrlinkWrap J-cutMsg'</span>;</span><br><span class="line">			section.innerHTML = html;</span><br><span class="line">			<span class="keyword">this</span>.msgObj.appendChild(section);	</span><br><span class="line">			<span class="keyword">this</span>.scrollToBottom();</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="comment">//第一个界面用户提交用户名</span></span><br><span class="line">		usernameSubmit:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> username = d.getElementById(<span class="string">"username"</span>).value;</span><br><span class="line">			<span class="keyword">if</span>(username != <span class="string">""</span>)&#123;</span><br><span class="line">				d.getElementById(<span class="string">"username"</span>).value = <span class="string">''</span>;</span><br><span class="line">				d.getElementById(<span class="string">"loginbox"</span>).style.display = <span class="string">'none'</span>;</span><br><span class="line">				d.getElementById(<span class="string">"chatbox"</span>).style.display = <span class="string">'block'</span>;</span><br><span class="line">				<span class="keyword">this</span>.init(username);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;,</span><br><span class="line">		init:<span class="function"><span class="keyword">function</span>(<span class="params">username</span>)</span>&#123;</span><br><span class="line">			<span class="comment">/*</span><br><span class="line">			客户端根据时间和随机数生成uid,这样使得聊天室用户名称可以重复。</span><br><span class="line">			实际项目中，如果是需要用户登录，那么直接采用用户的uid来做标识就可以</span><br><span class="line">			*/</span></span><br><span class="line">			<span class="keyword">this</span>.userid = <span class="keyword">this</span>.genUid();</span><br><span class="line">			<span class="keyword">this</span>.username = username;</span><br><span class="line">			</span><br><span class="line">			d.getElementById(<span class="string">"showusername"</span>).innerHTML = <span class="keyword">this</span>.username;</span><br><span class="line">			<span class="keyword">this</span>.msgObj.style.minHeight = (<span class="keyword">this</span>.screenheight - db.clientHeight + <span class="keyword">this</span>.msgObj.clientHeight) + <span class="string">"px"</span>;</span><br><span class="line">			<span class="keyword">this</span>.scrollToBottom();</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//连接websocket后端服务器</span></span><br><span class="line">			<span class="keyword">this</span>.socket = io.connect(<span class="string">'ws://realtime.plhwin.com:3000'</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//告诉服务器端有用户登录</span></span><br><span class="line">			<span class="keyword">this</span>.socket.emit(<span class="string">'login'</span>, &#123;userid:<span class="keyword">this</span>.userid, username:<span class="keyword">this</span>.username&#125;);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//监听新用户登录</span></span><br><span class="line">			<span class="keyword">this</span>.socket.on(<span class="string">'login'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">				CHAT.updateSysMsg(o, <span class="string">'login'</span>);	</span><br><span class="line">			&#125;);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//监听用户退出</span></span><br><span class="line">			<span class="keyword">this</span>.socket.on(<span class="string">'logout'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">				CHAT.updateSysMsg(o, <span class="string">'logout'</span>);</span><br><span class="line">			&#125;);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//监听消息发送</span></span><br><span class="line">			<span class="keyword">this</span>.socket.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">var</span> isme = (obj.userid == CHAT.userid) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">var</span> contentDiv = <span class="string">'&lt;div&gt;'</span>+obj.content+<span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">				<span class="keyword">var</span> usernameDiv = <span class="string">'&lt;span&gt;'</span>+obj.username+<span class="string">'&lt;/span&gt;'</span>;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">var</span> section = d.createElement(<span class="string">'section'</span>);</span><br><span class="line">				<span class="keyword">if</span>(isme)&#123;</span><br><span class="line">					section.className = <span class="string">'user'</span>;</span><br><span class="line">					section.innerHTML = contentDiv + usernameDiv;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					section.className = <span class="string">'service'</span>;</span><br><span class="line">					section.innerHTML = usernameDiv + contentDiv;</span><br><span class="line">				&#125;</span><br><span class="line">				CHAT.msgObj.appendChild(section);</span><br><span class="line">				CHAT.scrollToBottom();	</span><br><span class="line">			&#125;);</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">//通过“回车”提交用户名</span></span><br><span class="line">	d.getElementById(<span class="string">"username"</span>).onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">		e = e || event;</span><br><span class="line">		<span class="keyword">if</span> (e.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">			CHAT.usernameSubmit();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">//通过“回车”提交信息</span></span><br><span class="line">	d.getElementById(<span class="string">"content"</span>).onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">		e = e || event;</span><br><span class="line">		<span class="keyword">if</span> (e.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">			CHAT.submit();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>至此所有的编码开发工作全部完成了，在浏览器中打开<a href="http://demo.plhwin.com/chat/" target="_blank" rel="external">demo.plhwin.com/chat/</a>就可以看到效果了。上面所有的客户端和服务端的代码可以从Github上获得，<a href="https://github.com/plhwin/nodejs-socketio-chat" target="_blank" rel="external">点这里跳转到Github项目主页</a>，或者在命令行将代码Clone到本地。</p>
<pre><code>git clone https://github.com/plhwin/nodejs-socketio-chat.git
</code></pre><p>下载本地后有两个文件夹 <code>client</code> 和 <code>server</code>，<code>client</code>文件夹是客户端源码，可以放在Nginx/Apache的WebServer中，也可以放在Node.js的WebServer中。后面的<code>server</code>文件夹里的代码是websocket服务端代码，放在Node.js环境中，使用npm安装完 <code>express</code> 和 <code>socket.io</code> 后，<code>node index.js</code> 启动后端服务就可以了。</p>
<h1 id="u7559_u7ED9_u6211_u4EEC_u7684_u601D_u8003"><a href="#u7559_u7ED9_u6211_u4EEC_u7684_u601D_u8003" class="headerlink" title="留给我们的思考"></a>留给我们的思考</h1><p>1、假设是一个在线客服系统，里面有许多的公司使用你的服务，每个公司自己的用户可以通过一个专属URL地址进入该公司的聊天室，聊天是一对一的，每个公司可以新建多个客服人员，每个客服人员可以同时和客户端的多个用户聊天。</p>
<p>2、又假设是一个在线WebIM系统，实现类似微信，qq的功能，客户端可以看到好友在线状态，在线列表，添加好友，删除好友，新建群组等，消息的发送除了支持基本的文字外，还能支持表情、图片和文件。</p>
<p>有兴趣的同学可以继续深入研究。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Web领域的实时推送技术，也被称作Realtime技术。这种技术要达到的目的是让用户不需要刷新浏览器就可以获得实时更新。它有着广泛的应用场景，比如在线聊天室、在线客服系统、评论系统、WebIM等。<br>]]>
    
    </summary>
    
      <category term="Node.js" scheme="http://www.plhwin.com/tags/Node-js/"/>
    
      <category term="NodeJS" scheme="http://www.plhwin.com/tags/NodeJS/"/>
    
      <category term="Realtime" scheme="http://www.plhwin.com/tags/Realtime/"/>
    
      <category term="Socket.IO" scheme="http://www.plhwin.com/tags/Socket-IO/"/>
    
      <category term="WebSocket" scheme="http://www.plhwin.com/tags/WebSocket/"/>
    
      <category term="消息推送" scheme="http://www.plhwin.com/tags/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/"/>
    
      <category term="网络编程" scheme="http://www.plhwin.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="编程" scheme="http://www.plhwin.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
